import 'package:flutter/material.dart';
import 'package:timezone/data/latest.dart' as tz;
import 'package:fittracker_source/services/notification_service.dart';
import 'Screens/initial_screen/Welcome_Screen.dart';
import 'package:shared_preferences/shared_preferences.dart';

// Firebase
import 'package:firebase_core/firebase_core.dart';
// If you have generated DefaultFirebaseOptions via FlutterFire CLI,
// uncomment the following import and the initializeApp call using options:
// import 'firebase_options.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();

  try {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setBool('hasLoggedOnce', false);
  } catch (_) {}

  // Initialize timezone data first (used by notifications)
  tz.initializeTimeZones();

  // Initialize Firebase. If DefaultFirebaseOptions is available (generated by FlutterFire CLI),
  // prefer using it. Otherwise fallback to default initialization that relies on native config files.
  try {
    // If you generated firebase_options.dart with DefaultFirebaseOptions, use:
    // await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);
    await Firebase.initializeApp();
  } catch (e) {
    // initialization failed â€” log or handle as needed. Keep app running but features using Firebase will fail.
    // You can replace this with more robust error handling if desired.
    // ignore: avoid_print
    print('Firebase.initializeApp() failed: $e');
  }

  // Initialize notification service (may depend on tz)
  await NotificationService.initialize();

  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'FitTracker',
      debugShowCheckedModeBanner: false,
      theme: ThemeData(primarySwatch: Colors.teal),
      home: const WelcomeScreen(),
    );
  }
}
